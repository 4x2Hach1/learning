// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server HTTP server
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package server

import (
	"context"
	"net/http"
	"regexp"

	server "github.com/4x2Hach1/learning/next-go/api/gen/server"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the server service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	Hello        http.Handler
	Login        http.Handler
	AuthUser     http.Handler
	Users        http.Handler
	UserByID     http.Handler
	NewUser      http.Handler
	UpdateUser   http.Handler
	Memories     http.Handler
	MemoryByID   http.Handler
	NewMemory    http.Handler
	DeleteMemory http.Handler
	UpdateMemory http.Handler
	NewHeavy     http.Handler
	CheckHeavy   http.Handler
	DeleteHeavy  http.Handler
	CORS         http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the server service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *server.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Hello", "GET", "/hello/{name}"},
			{"Login", "POST", "/login"},
			{"AuthUser", "GET", "/user/auth"},
			{"Users", "GET", "/users"},
			{"UserByID", "GET", "/user/{id}"},
			{"NewUser", "POST", "/user"},
			{"UpdateUser", "PATCH", "/user"},
			{"Memories", "GET", "/memories"},
			{"MemoryByID", "GET", "/memory/{id}"},
			{"NewMemory", "POST", "/memory"},
			{"DeleteMemory", "DELETE", "/memory/{id}"},
			{"UpdateMemory", "PATCH", "/memory/{id}"},
			{"NewHeavy", "POST", "/heavy"},
			{"CheckHeavy", "GET", "/heavy/{key}"},
			{"DeleteHeavy", "DELETE", "/heavy/{key}"},
			{"CORS", "OPTIONS", "/hello/{name}"},
			{"CORS", "OPTIONS", "/login"},
			{"CORS", "OPTIONS", "/user/auth"},
			{"CORS", "OPTIONS", "/users"},
			{"CORS", "OPTIONS", "/user/{id}"},
			{"CORS", "OPTIONS", "/user"},
			{"CORS", "OPTIONS", "/memories"},
			{"CORS", "OPTIONS", "/memory/{id}"},
			{"CORS", "OPTIONS", "/memory"},
			{"CORS", "OPTIONS", "/heavy"},
			{"CORS", "OPTIONS", "/heavy/{key}"},
		},
		Hello:        NewHelloHandler(e.Hello, mux, decoder, encoder, errhandler, formatter),
		Login:        NewLoginHandler(e.Login, mux, decoder, encoder, errhandler, formatter),
		AuthUser:     NewAuthUserHandler(e.AuthUser, mux, decoder, encoder, errhandler, formatter),
		Users:        NewUsersHandler(e.Users, mux, decoder, encoder, errhandler, formatter),
		UserByID:     NewUserByIDHandler(e.UserByID, mux, decoder, encoder, errhandler, formatter),
		NewUser:      NewNewUserHandler(e.NewUser, mux, decoder, encoder, errhandler, formatter),
		UpdateUser:   NewUpdateUserHandler(e.UpdateUser, mux, decoder, encoder, errhandler, formatter),
		Memories:     NewMemoriesHandler(e.Memories, mux, decoder, encoder, errhandler, formatter),
		MemoryByID:   NewMemoryByIDHandler(e.MemoryByID, mux, decoder, encoder, errhandler, formatter),
		NewMemory:    NewNewMemoryHandler(e.NewMemory, mux, decoder, encoder, errhandler, formatter),
		DeleteMemory: NewDeleteMemoryHandler(e.DeleteMemory, mux, decoder, encoder, errhandler, formatter),
		UpdateMemory: NewUpdateMemoryHandler(e.UpdateMemory, mux, decoder, encoder, errhandler, formatter),
		NewHeavy:     NewNewHeavyHandler(e.NewHeavy, mux, decoder, encoder, errhandler, formatter),
		CheckHeavy:   NewCheckHeavyHandler(e.CheckHeavy, mux, decoder, encoder, errhandler, formatter),
		DeleteHeavy:  NewDeleteHeavyHandler(e.DeleteHeavy, mux, decoder, encoder, errhandler, formatter),
		CORS:         NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "server" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Hello = m(s.Hello)
	s.Login = m(s.Login)
	s.AuthUser = m(s.AuthUser)
	s.Users = m(s.Users)
	s.UserByID = m(s.UserByID)
	s.NewUser = m(s.NewUser)
	s.UpdateUser = m(s.UpdateUser)
	s.Memories = m(s.Memories)
	s.MemoryByID = m(s.MemoryByID)
	s.NewMemory = m(s.NewMemory)
	s.DeleteMemory = m(s.DeleteMemory)
	s.UpdateMemory = m(s.UpdateMemory)
	s.NewHeavy = m(s.NewHeavy)
	s.CheckHeavy = m(s.CheckHeavy)
	s.DeleteHeavy = m(s.DeleteHeavy)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return server.MethodNames[:] }

// Mount configures the mux to serve the server endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountHelloHandler(mux, h.Hello)
	MountLoginHandler(mux, h.Login)
	MountAuthUserHandler(mux, h.AuthUser)
	MountUsersHandler(mux, h.Users)
	MountUserByIDHandler(mux, h.UserByID)
	MountNewUserHandler(mux, h.NewUser)
	MountUpdateUserHandler(mux, h.UpdateUser)
	MountMemoriesHandler(mux, h.Memories)
	MountMemoryByIDHandler(mux, h.MemoryByID)
	MountNewMemoryHandler(mux, h.NewMemory)
	MountDeleteMemoryHandler(mux, h.DeleteMemory)
	MountUpdateMemoryHandler(mux, h.UpdateMemory)
	MountNewHeavyHandler(mux, h.NewHeavy)
	MountCheckHeavyHandler(mux, h.CheckHeavy)
	MountDeleteHeavyHandler(mux, h.DeleteHeavy)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the server endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountHelloHandler configures the mux to serve the "server" service "hello"
// endpoint.
func MountHelloHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/hello/{name}", f)
}

// NewHelloHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "hello" endpoint.
func NewHelloHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeHelloRequest(mux, decoder)
		encodeResponse = EncodeHelloResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "hello")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLoginHandler configures the mux to serve the "server" service "login"
// endpoint.
func MountLoginHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/login", f)
}

// NewLoginHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "login" endpoint.
func NewLoginHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLoginRequest(mux, decoder)
		encodeResponse = EncodeLoginResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "login")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAuthUserHandler configures the mux to serve the "server" service
// "authUser" endpoint.
func MountAuthUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/auth", f)
}

// NewAuthUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "authUser" endpoint.
func NewAuthUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAuthUserRequest(mux, decoder)
		encodeResponse = EncodeAuthUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "authUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUsersHandler configures the mux to serve the "server" service "users"
// endpoint.
func MountUsersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/users", f)
}

// NewUsersHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "users" endpoint.
func NewUsersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUsersRequest(mux, decoder)
		encodeResponse = EncodeUsersResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "users")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUserByIDHandler configures the mux to serve the "server" service
// "userById" endpoint.
func MountUserByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/user/{id}", f)
}

// NewUserByIDHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "userById" endpoint.
func NewUserByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUserByIDRequest(mux, decoder)
		encodeResponse = EncodeUserByIDResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "userById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNewUserHandler configures the mux to serve the "server" service
// "newUser" endpoint.
func MountNewUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/user", f)
}

// NewNewUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "newUser" endpoint.
func NewNewUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewUserRequest(mux, decoder)
		encodeResponse = EncodeNewUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "newUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateUserHandler configures the mux to serve the "server" service
// "updateUser" endpoint.
func MountUpdateUserHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/user", f)
}

// NewUpdateUserHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "updateUser" endpoint.
func NewUpdateUserHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateUserRequest(mux, decoder)
		encodeResponse = EncodeUpdateUserResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateUser")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMemoriesHandler configures the mux to serve the "server" service
// "memories" endpoint.
func MountMemoriesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/memories", f)
}

// NewMemoriesHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "memories" endpoint.
func NewMemoriesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMemoriesRequest(mux, decoder)
		encodeResponse = EncodeMemoriesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "memories")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMemoryByIDHandler configures the mux to serve the "server" service
// "memoryById" endpoint.
func MountMemoryByIDHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/memory/{id}", f)
}

// NewMemoryByIDHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "memoryById" endpoint.
func NewMemoryByIDHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMemoryByIDRequest(mux, decoder)
		encodeResponse = EncodeMemoryByIDResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "memoryById")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNewMemoryHandler configures the mux to serve the "server" service
// "newMemory" endpoint.
func MountNewMemoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/memory", f)
}

// NewNewMemoryHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "newMemory" endpoint.
func NewNewMemoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewMemoryRequest(mux, decoder)
		encodeResponse = EncodeNewMemoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "newMemory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMemoryHandler configures the mux to serve the "server" service
// "deleteMemory" endpoint.
func MountDeleteMemoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/memory/{id}", f)
}

// NewDeleteMemoryHandler creates a HTTP handler which loads the HTTP request
// and calls the "server" service "deleteMemory" endpoint.
func NewDeleteMemoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMemoryRequest(mux, decoder)
		encodeResponse = EncodeDeleteMemoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteMemory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMemoryHandler configures the mux to serve the "server" service
// "updateMemory" endpoint.
func MountUpdateMemoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/memory/{id}", f)
}

// NewUpdateMemoryHandler creates a HTTP handler which loads the HTTP request
// and calls the "server" service "updateMemory" endpoint.
func NewUpdateMemoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMemoryRequest(mux, decoder)
		encodeResponse = EncodeUpdateMemoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateMemory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNewHeavyHandler configures the mux to serve the "server" service
// "newHeavy" endpoint.
func MountNewHeavyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/heavy", f)
}

// NewNewHeavyHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "newHeavy" endpoint.
func NewNewHeavyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewHeavyRequest(mux, decoder)
		encodeResponse = EncodeNewHeavyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "newHeavy")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCheckHeavyHandler configures the mux to serve the "server" service
// "checkHeavy" endpoint.
func MountCheckHeavyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/heavy/{key}", f)
}

// NewCheckHeavyHandler creates a HTTP handler which loads the HTTP request and
// calls the "server" service "checkHeavy" endpoint.
func NewCheckHeavyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCheckHeavyRequest(mux, decoder)
		encodeResponse = EncodeCheckHeavyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "checkHeavy")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteHeavyHandler configures the mux to serve the "server" service
// "deleteHeavy" endpoint.
func MountDeleteHeavyHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleServerOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/heavy/{key}", f)
}

// NewDeleteHeavyHandler creates a HTTP handler which loads the HTTP request
// and calls the "server" service "deleteHeavy" endpoint.
func NewDeleteHeavyHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteHeavyRequest(mux, decoder)
		encodeResponse = EncodeDeleteHeavyResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteHeavy")
		ctx = context.WithValue(ctx, goa.ServiceKey, "server")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service server.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleServerOrigin(h)
	mux.Handle("OPTIONS", "/hello/{name}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/login", h.ServeHTTP)
	mux.Handle("OPTIONS", "/user/auth", h.ServeHTTP)
	mux.Handle("OPTIONS", "/users", h.ServeHTTP)
	mux.Handle("OPTIONS", "/user/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/user", h.ServeHTTP)
	mux.Handle("OPTIONS", "/memories", h.ServeHTTP)
	mux.Handle("OPTIONS", "/memory/{id}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/memory", h.ServeHTTP)
	mux.Handle("OPTIONS", "/heavy", h.ServeHTTP)
	mux.Handle("OPTIONS", "/heavy/{key}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 204 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(204)
	})
}

// HandleServerOrigin applies the CORS response headers corresponding to the
// origin for the service server.
func HandleServerOrigin(h http.Handler) http.Handler {
	spec0 := regexp.MustCompile(".*localhost.*")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOriginRegexp(origin, spec0) {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "100")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PATCH, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "*")
				w.WriteHeader(204)
				return
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
