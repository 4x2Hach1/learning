// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server client HTTP transport
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the server service endpoint HTTP clients.
type Client struct {
	// Hello Doer is the HTTP client used to make requests to the hello endpoint.
	HelloDoer goahttp.Doer

	// Login Doer is the HTTP client used to make requests to the login endpoint.
	LoginDoer goahttp.Doer

	// AuthUser Doer is the HTTP client used to make requests to the authUser
	// endpoint.
	AuthUserDoer goahttp.Doer

	// Users Doer is the HTTP client used to make requests to the users endpoint.
	UsersDoer goahttp.Doer

	// UserByID Doer is the HTTP client used to make requests to the userById
	// endpoint.
	UserByIDDoer goahttp.Doer

	// NewUser Doer is the HTTP client used to make requests to the newUser
	// endpoint.
	NewUserDoer goahttp.Doer

	// UpdateUser Doer is the HTTP client used to make requests to the updateUser
	// endpoint.
	UpdateUserDoer goahttp.Doer

	// Memories Doer is the HTTP client used to make requests to the memories
	// endpoint.
	MemoriesDoer goahttp.Doer

	// MemoryByID Doer is the HTTP client used to make requests to the memoryById
	// endpoint.
	MemoryByIDDoer goahttp.Doer

	// NewMemory Doer is the HTTP client used to make requests to the newMemory
	// endpoint.
	NewMemoryDoer goahttp.Doer

	// DeleteMemory Doer is the HTTP client used to make requests to the
	// deleteMemory endpoint.
	DeleteMemoryDoer goahttp.Doer

	// UpdateMemory Doer is the HTTP client used to make requests to the
	// updateMemory endpoint.
	UpdateMemoryDoer goahttp.Doer

	// NewHeavy Doer is the HTTP client used to make requests to the newHeavy
	// endpoint.
	NewHeavyDoer goahttp.Doer

	// CheckHeavy Doer is the HTTP client used to make requests to the checkHeavy
	// endpoint.
	CheckHeavyDoer goahttp.Doer

	// DeleteHeavy Doer is the HTTP client used to make requests to the deleteHeavy
	// endpoint.
	DeleteHeavyDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the server service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		HelloDoer:           doer,
		LoginDoer:           doer,
		AuthUserDoer:        doer,
		UsersDoer:           doer,
		UserByIDDoer:        doer,
		NewUserDoer:         doer,
		UpdateUserDoer:      doer,
		MemoriesDoer:        doer,
		MemoryByIDDoer:      doer,
		NewMemoryDoer:       doer,
		DeleteMemoryDoer:    doer,
		UpdateMemoryDoer:    doer,
		NewHeavyDoer:        doer,
		CheckHeavyDoer:      doer,
		DeleteHeavyDoer:     doer,
		CORSDoer:            doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Hello returns an endpoint that makes HTTP requests to the server service
// hello server.
func (c *Client) Hello() goa.Endpoint {
	var (
		decodeResponse = DecodeHelloResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildHelloRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.HelloDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "hello", err)
		}
		return decodeResponse(resp)
	}
}

// Login returns an endpoint that makes HTTP requests to the server service
// login server.
func (c *Client) Login() goa.Endpoint {
	var (
		encodeRequest  = EncodeLoginRequest(c.encoder)
		decodeResponse = DecodeLoginResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildLoginRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.LoginDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "login", err)
		}
		return decodeResponse(resp)
	}
}

// AuthUser returns an endpoint that makes HTTP requests to the server service
// authUser server.
func (c *Client) AuthUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeAuthUserRequest(c.encoder)
		decodeResponse = DecodeAuthUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAuthUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AuthUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "authUser", err)
		}
		return decodeResponse(resp)
	}
}

// Users returns an endpoint that makes HTTP requests to the server service
// users server.
func (c *Client) Users() goa.Endpoint {
	var (
		encodeRequest  = EncodeUsersRequest(c.encoder)
		decodeResponse = DecodeUsersResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUsersRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UsersDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "users", err)
		}
		return decodeResponse(resp)
	}
}

// UserByID returns an endpoint that makes HTTP requests to the server service
// userById server.
func (c *Client) UserByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeUserByIDRequest(c.encoder)
		decodeResponse = DecodeUserByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUserByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UserByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "userById", err)
		}
		return decodeResponse(resp)
	}
}

// NewUser returns an endpoint that makes HTTP requests to the server service
// newUser server.
func (c *Client) NewUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeNewUserRequest(c.encoder)
		decodeResponse = DecodeNewUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNewUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NewUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "newUser", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateUser returns an endpoint that makes HTTP requests to the server
// service updateUser server.
func (c *Client) UpdateUser() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateUserRequest(c.encoder)
		decodeResponse = DecodeUpdateUserResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateUserRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateUserDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "updateUser", err)
		}
		return decodeResponse(resp)
	}
}

// Memories returns an endpoint that makes HTTP requests to the server service
// memories server.
func (c *Client) Memories() goa.Endpoint {
	var (
		encodeRequest  = EncodeMemoriesRequest(c.encoder)
		decodeResponse = DecodeMemoriesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMemoriesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MemoriesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "memories", err)
		}
		return decodeResponse(resp)
	}
}

// MemoryByID returns an endpoint that makes HTTP requests to the server
// service memoryById server.
func (c *Client) MemoryByID() goa.Endpoint {
	var (
		encodeRequest  = EncodeMemoryByIDRequest(c.encoder)
		decodeResponse = DecodeMemoryByIDResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildMemoryByIDRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MemoryByIDDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "memoryById", err)
		}
		return decodeResponse(resp)
	}
}

// NewMemory returns an endpoint that makes HTTP requests to the server service
// newMemory server.
func (c *Client) NewMemory() goa.Endpoint {
	var (
		encodeRequest  = EncodeNewMemoryRequest(c.encoder)
		decodeResponse = DecodeNewMemoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNewMemoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NewMemoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "newMemory", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteMemory returns an endpoint that makes HTTP requests to the server
// service deleteMemory server.
func (c *Client) DeleteMemory() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteMemoryRequest(c.encoder)
		decodeResponse = DecodeDeleteMemoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteMemoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteMemoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "deleteMemory", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateMemory returns an endpoint that makes HTTP requests to the server
// service updateMemory server.
func (c *Client) UpdateMemory() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateMemoryRequest(c.encoder)
		decodeResponse = DecodeUpdateMemoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateMemoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateMemoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "updateMemory", err)
		}
		return decodeResponse(resp)
	}
}

// NewHeavy returns an endpoint that makes HTTP requests to the server service
// newHeavy server.
func (c *Client) NewHeavy() goa.Endpoint {
	var (
		encodeRequest  = EncodeNewHeavyRequest(c.encoder)
		decodeResponse = DecodeNewHeavyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNewHeavyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NewHeavyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "newHeavy", err)
		}
		return decodeResponse(resp)
	}
}

// CheckHeavy returns an endpoint that makes HTTP requests to the server
// service checkHeavy server.
func (c *Client) CheckHeavy() goa.Endpoint {
	var (
		encodeRequest  = EncodeCheckHeavyRequest(c.encoder)
		decodeResponse = DecodeCheckHeavyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCheckHeavyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CheckHeavyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "checkHeavy", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteHeavy returns an endpoint that makes HTTP requests to the server
// service deleteHeavy server.
func (c *Client) DeleteHeavy() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteHeavyRequest(c.encoder)
		decodeResponse = DecodeDeleteHeavyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteHeavyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteHeavyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("server", "deleteHeavy", err)
		}
		return decodeResponse(resp)
	}
}
