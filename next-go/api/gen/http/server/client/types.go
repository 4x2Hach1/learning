// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server HTTP client types
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package client

import (
	server "github.com/4x2Hach1/learning/next-go/api/gen/server"
	serverviews "github.com/4x2Hach1/learning/next-go/api/gen/server/views"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "server" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Email
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// NewUserRequestBody is the type of the "server" service "newUser" endpoint
// HTTP request body.
type NewUserRequestBody struct {
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Email
	Email string `form:"email" json:"email" xml:"email"`
	// Password
	Password string `form:"password" json:"password" xml:"password"`
}

// UpdateUserRequestBody is the type of the "server" service "updateUser"
// endpoint HTTP request body.
type UpdateUserRequestBody struct {
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Email
	Email string `form:"email" json:"email" xml:"email"`
}

// NewMemoryRequestBody is the type of the "server" service "newMemory"
// endpoint HTTP request body.
type NewMemoryRequestBody struct {
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// Date
	Date string `form:"date" json:"date" xml:"date"`
	// Location
	Location string `form:"location" json:"location" xml:"location"`
	// Detail
	Detail string `form:"detail" json:"detail" xml:"detail"`
}

// UpdateMemoryRequestBody is the type of the "server" service "updateMemory"
// endpoint HTTP request body.
type UpdateMemoryRequestBody struct {
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// Date
	Date string `form:"date" json:"date" xml:"date"`
	// Location
	Location string `form:"location" json:"location" xml:"location"`
	// Detail
	Detail string `form:"detail" json:"detail" xml:"detail"`
}

// AuthUserResponseBody is the type of the "server" service "authUser" endpoint
// HTTP response body.
type AuthUserResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// UsersResponseBody is the type of the "server" service "users" endpoint HTTP
// response body.
type UsersResponseBody []*UserResponse

// UserByIDResponseBody is the type of the "server" service "userById" endpoint
// HTTP response body.
type UserByIDResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// MemoriesResponseBody is the type of the "server" service "memories" endpoint
// HTTP response body.
type MemoriesResponseBody []*MemoryResponse

// MemoryByIDResponseBody is the type of the "server" service "memoryById"
// endpoint HTTP response body.
type MemoryByIDResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// UsersId
	UsersID *int `form:"users_id,omitempty" json:"users_id,omitempty" xml:"users_id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Date
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Detail
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
}

// UserResponse is used to define fields on response body types.
type UserResponse struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// MemoryResponse is used to define fields on response body types.
type MemoryResponse struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// UsersId
	UsersID *int `form:"users_id,omitempty" json:"users_id,omitempty" xml:"users_id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Date
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// Location
	Location *string `form:"location,omitempty" json:"location,omitempty" xml:"location,omitempty"`
	// Detail
	Detail *string `form:"detail,omitempty" json:"detail,omitempty" xml:"detail,omitempty"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "login" endpoint of the "server" service.
func NewLoginRequestBody(p *server.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewNewUserRequestBody builds the HTTP request body from the payload of the
// "newUser" endpoint of the "server" service.
func NewNewUserRequestBody(p *server.NewUserPayload) *NewUserRequestBody {
	body := &NewUserRequestBody{
		Name:     p.Name,
		Email:    p.Email,
		Password: p.Password,
	}
	return body
}

// NewUpdateUserRequestBody builds the HTTP request body from the payload of
// the "updateUser" endpoint of the "server" service.
func NewUpdateUserRequestBody(p *server.UpdateUserPayload) *UpdateUserRequestBody {
	body := &UpdateUserRequestBody{
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewNewMemoryRequestBody builds the HTTP request body from the payload of the
// "newMemory" endpoint of the "server" service.
func NewNewMemoryRequestBody(p *server.NewMemoryPayload) *NewMemoryRequestBody {
	body := &NewMemoryRequestBody{
		Title:    p.Title,
		Date:     p.Date,
		Location: p.Location,
		Detail:   p.Detail,
	}
	return body
}

// NewUpdateMemoryRequestBody builds the HTTP request body from the payload of
// the "updateMemory" endpoint of the "server" service.
func NewUpdateMemoryRequestBody(p *server.UpdateMemoryPayload) *UpdateMemoryRequestBody {
	body := &UpdateMemoryRequestBody{
		Title:    p.Title,
		Date:     p.Date,
		Location: p.Location,
		Detail:   p.Detail,
	}
	return body
}

// NewAuthUserUserOK builds a "server" service "authUser" endpoint result from
// a HTTP "OK" response.
func NewAuthUserUserOK(body *AuthUserResponseBody) *serverviews.UserView {
	v := &serverviews.UserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}

	return v
}

// NewUsersUserOK builds a "server" service "users" endpoint result from a HTTP
// "OK" response.
func NewUsersUserOK(body []*UserResponse) []*server.User {
	v := make([]*server.User, len(body))
	for i, val := range body {
		v[i] = unmarshalUserResponseToServerUser(val)
	}

	return v
}

// NewUserByIDUserOK builds a "server" service "userById" endpoint result from
// a HTTP "OK" response.
func NewUserByIDUserOK(body *UserByIDResponseBody) *serverviews.UserView {
	v := &serverviews.UserView{
		ID:    body.ID,
		Name:  body.Name,
		Email: body.Email,
	}

	return v
}

// NewMemoriesMemoryOK builds a "server" service "memories" endpoint result
// from a HTTP "OK" response.
func NewMemoriesMemoryOK(body []*MemoryResponse) []*server.Memory {
	v := make([]*server.Memory, len(body))
	for i, val := range body {
		v[i] = unmarshalMemoryResponseToServerMemory(val)
	}

	return v
}

// NewMemoryByIDMemoryOK builds a "server" service "memoryById" endpoint result
// from a HTTP "OK" response.
func NewMemoryByIDMemoryOK(body *MemoryByIDResponseBody) *serverviews.MemoryView {
	v := &serverviews.MemoryView{
		ID:       body.ID,
		UsersID:  body.UsersID,
		Title:    body.Title,
		Date:     body.Date,
		Location: body.Location,
		Detail:   body.Detail,
	}

	return v
}

// ValidateMemoryResponse runs the validations defined on MemoryResponse
func ValidateMemoryResponse(body *MemoryResponse) (err error) {
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.date", *body.Date, goa.FormatDate))
	}
	return
}
