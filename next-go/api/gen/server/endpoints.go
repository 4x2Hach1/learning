// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server endpoints
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package server

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "server" service endpoints.
type Endpoints struct {
	Hello        goa.Endpoint
	Login        goa.Endpoint
	AuthUser     goa.Endpoint
	Users        goa.Endpoint
	UserByID     goa.Endpoint
	NewUser      goa.Endpoint
	UpdateUser   goa.Endpoint
	Memories     goa.Endpoint
	MemoryByID   goa.Endpoint
	NewMemory    goa.Endpoint
	DeleteMemory goa.Endpoint
	UpdateMemory goa.Endpoint
	NewHeavy     goa.Endpoint
	CheckHeavy   goa.Endpoint
	DeleteHeavy  goa.Endpoint
}

// NewEndpoints wraps the methods of the "server" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Hello:        NewHelloEndpoint(s),
		Login:        NewLoginEndpoint(s),
		AuthUser:     NewAuthUserEndpoint(s, a.JWTAuth),
		Users:        NewUsersEndpoint(s, a.JWTAuth),
		UserByID:     NewUserByIDEndpoint(s, a.JWTAuth),
		NewUser:      NewNewUserEndpoint(s),
		UpdateUser:   NewUpdateUserEndpoint(s, a.JWTAuth),
		Memories:     NewMemoriesEndpoint(s, a.JWTAuth),
		MemoryByID:   NewMemoryByIDEndpoint(s, a.JWTAuth),
		NewMemory:    NewNewMemoryEndpoint(s, a.JWTAuth),
		DeleteMemory: NewDeleteMemoryEndpoint(s, a.JWTAuth),
		UpdateMemory: NewUpdateMemoryEndpoint(s, a.JWTAuth),
		NewHeavy:     NewNewHeavyEndpoint(s, a.JWTAuth),
		CheckHeavy:   NewCheckHeavyEndpoint(s, a.JWTAuth),
		DeleteHeavy:  NewDeleteHeavyEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "server" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Hello = m(e.Hello)
	e.Login = m(e.Login)
	e.AuthUser = m(e.AuthUser)
	e.Users = m(e.Users)
	e.UserByID = m(e.UserByID)
	e.NewUser = m(e.NewUser)
	e.UpdateUser = m(e.UpdateUser)
	e.Memories = m(e.Memories)
	e.MemoryByID = m(e.MemoryByID)
	e.NewMemory = m(e.NewMemory)
	e.DeleteMemory = m(e.DeleteMemory)
	e.UpdateMemory = m(e.UpdateMemory)
	e.NewHeavy = m(e.NewHeavy)
	e.CheckHeavy = m(e.CheckHeavy)
	e.DeleteHeavy = m(e.DeleteHeavy)
}

// NewHelloEndpoint returns an endpoint function that calls the method "hello"
// of service "server".
func NewHelloEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*HelloPayload)
		return s.Hello(ctx, p)
	}
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "server".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewAuthUserEndpoint returns an endpoint function that calls the method
// "authUser" of service "server".
func NewAuthUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AuthUserPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.AuthUser(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUser(res, "default")
		return vres, nil
	}
}

// NewUsersEndpoint returns an endpoint function that calls the method "users"
// of service "server".
func NewUsersEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UsersPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Users(ctx, p)
	}
}

// NewUserByIDEndpoint returns an endpoint function that calls the method
// "userById" of service "server".
func NewUserByIDEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UserByIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.UserByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUser(res, "default")
		return vres, nil
	}
}

// NewNewUserEndpoint returns an endpoint function that calls the method
// "newUser" of service "server".
func NewNewUserEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*NewUserPayload)
		return s.NewUser(ctx, p)
	}
}

// NewUpdateUserEndpoint returns an endpoint function that calls the method
// "updateUser" of service "server".
func NewUpdateUserEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateUserPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateUser(ctx, p)
	}
}

// NewMemoriesEndpoint returns an endpoint function that calls the method
// "memories" of service "server".
func NewMemoriesEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MemoriesPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Memories(ctx, p)
	}
}

// NewMemoryByIDEndpoint returns an endpoint function that calls the method
// "memoryById" of service "server".
func NewMemoryByIDEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*MemoryByIDPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.MemoryByID(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMemory(res, "default")
		return vres, nil
	}
}

// NewNewMemoryEndpoint returns an endpoint function that calls the method
// "newMemory" of service "server".
func NewNewMemoryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*NewMemoryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.NewMemory(ctx, p)
	}
}

// NewDeleteMemoryEndpoint returns an endpoint function that calls the method
// "deleteMemory" of service "server".
func NewDeleteMemoryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteMemoryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.DeleteMemory(ctx, p)
	}
}

// NewUpdateMemoryEndpoint returns an endpoint function that calls the method
// "updateMemory" of service "server".
func NewUpdateMemoryEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateMemoryPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateMemory(ctx, p)
	}
}

// NewNewHeavyEndpoint returns an endpoint function that calls the method
// "newHeavy" of service "server".
func NewNewHeavyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*NewHeavyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.NewHeavy(ctx, p)
	}
}

// NewCheckHeavyEndpoint returns an endpoint function that calls the method
// "checkHeavy" of service "server".
func NewCheckHeavyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CheckHeavyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.CheckHeavy(ctx, p)
	}
}

// NewDeleteHeavyEndpoint returns an endpoint function that calls the method
// "deleteHeavy" of service "server".
func NewDeleteHeavyEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteHeavyPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:access"},
			RequiredScopes: []string{"api:access"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.DeleteHeavy(ctx, p)
	}
}
