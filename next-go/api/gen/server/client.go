// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server client
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package server

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "server" service client.
type Client struct {
	HelloEndpoint        goa.Endpoint
	LoginEndpoint        goa.Endpoint
	AuthUserEndpoint     goa.Endpoint
	UsersEndpoint        goa.Endpoint
	UserByIDEndpoint     goa.Endpoint
	NewUserEndpoint      goa.Endpoint
	UpdateUserEndpoint   goa.Endpoint
	MemoriesEndpoint     goa.Endpoint
	MemoryByIDEndpoint   goa.Endpoint
	NewMemoryEndpoint    goa.Endpoint
	DeleteMemoryEndpoint goa.Endpoint
	UpdateMemoryEndpoint goa.Endpoint
	NewHeavyEndpoint     goa.Endpoint
	CheckHeavyEndpoint   goa.Endpoint
	DeleteHeavyEndpoint  goa.Endpoint
}

// NewClient initializes a "server" service client given the endpoints.
func NewClient(hello, login, authUser, users, userByID, newUser, updateUser, memories, memoryByID, newMemory, deleteMemory, updateMemory, newHeavy, checkHeavy, deleteHeavy goa.Endpoint) *Client {
	return &Client{
		HelloEndpoint:        hello,
		LoginEndpoint:        login,
		AuthUserEndpoint:     authUser,
		UsersEndpoint:        users,
		UserByIDEndpoint:     userByID,
		NewUserEndpoint:      newUser,
		UpdateUserEndpoint:   updateUser,
		MemoriesEndpoint:     memories,
		MemoryByIDEndpoint:   memoryByID,
		NewMemoryEndpoint:    newMemory,
		DeleteMemoryEndpoint: deleteMemory,
		UpdateMemoryEndpoint: updateMemory,
		NewHeavyEndpoint:     newHeavy,
		CheckHeavyEndpoint:   checkHeavy,
		DeleteHeavyEndpoint:  deleteHeavy,
	}
}

// Hello calls the "hello" endpoint of the "server" service.
func (c *Client) Hello(ctx context.Context, p *HelloPayload) (res string, err error) {
	var ires any
	ires, err = c.HelloEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Login calls the "login" endpoint of the "server" service.
func (c *Client) Login(ctx context.Context, p *LoginPayload) (res string, err error) {
	var ires any
	ires, err = c.LoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// AuthUser calls the "authUser" endpoint of the "server" service.
func (c *Client) AuthUser(ctx context.Context, p *AuthUserPayload) (res *User, err error) {
	var ires any
	ires, err = c.AuthUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}

// Users calls the "users" endpoint of the "server" service.
func (c *Client) Users(ctx context.Context, p *UsersPayload) (res []*User, err error) {
	var ires any
	ires, err = c.UsersEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*User), nil
}

// UserByID calls the "userById" endpoint of the "server" service.
func (c *Client) UserByID(ctx context.Context, p *UserByIDPayload) (res *User, err error) {
	var ires any
	ires, err = c.UserByIDEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*User), nil
}

// NewUser calls the "newUser" endpoint of the "server" service.
func (c *Client) NewUser(ctx context.Context, p *NewUserPayload) (res bool, err error) {
	var ires any
	ires, err = c.NewUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// UpdateUser calls the "updateUser" endpoint of the "server" service.
func (c *Client) UpdateUser(ctx context.Context, p *UpdateUserPayload) (res bool, err error) {
	var ires any
	ires, err = c.UpdateUserEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// Memories calls the "memories" endpoint of the "server" service.
func (c *Client) Memories(ctx context.Context, p *MemoriesPayload) (res []*Memory, err error) {
	var ires any
	ires, err = c.MemoriesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*Memory), nil
}

// MemoryByID calls the "memoryById" endpoint of the "server" service.
func (c *Client) MemoryByID(ctx context.Context, p *MemoryByIDPayload) (res *Memory, err error) {
	var ires any
	ires, err = c.MemoryByIDEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Memory), nil
}

// NewMemory calls the "newMemory" endpoint of the "server" service.
func (c *Client) NewMemory(ctx context.Context, p *NewMemoryPayload) (res bool, err error) {
	var ires any
	ires, err = c.NewMemoryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// DeleteMemory calls the "deleteMemory" endpoint of the "server" service.
func (c *Client) DeleteMemory(ctx context.Context, p *DeleteMemoryPayload) (res bool, err error) {
	var ires any
	ires, err = c.DeleteMemoryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// UpdateMemory calls the "updateMemory" endpoint of the "server" service.
func (c *Client) UpdateMemory(ctx context.Context, p *UpdateMemoryPayload) (res bool, err error) {
	var ires any
	ires, err = c.UpdateMemoryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}

// NewHeavy calls the "newHeavy" endpoint of the "server" service.
func (c *Client) NewHeavy(ctx context.Context, p *NewHeavyPayload) (res string, err error) {
	var ires any
	ires, err = c.NewHeavyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// CheckHeavy calls the "checkHeavy" endpoint of the "server" service.
func (c *Client) CheckHeavy(ctx context.Context, p *CheckHeavyPayload) (res int, err error) {
	var ires any
	ires, err = c.CheckHeavyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(int), nil
}

// DeleteHeavy calls the "deleteHeavy" endpoint of the "server" service.
func (c *Client) DeleteHeavy(ctx context.Context, p *DeleteHeavyPayload) (res bool, err error) {
	var ires any
	ires, err = c.DeleteHeavyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(bool), nil
}
