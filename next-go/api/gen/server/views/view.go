// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server views
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// Memory is the viewed result type that is projected based on a view.
type Memory struct {
	// Type to project
	Projected *MemoryView
	// View to render
	View string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID
	ID *int
	// Name
	Name *string
	// Email
	Email *string
}

// MemoryView is a type that runs validations on a projected type.
type MemoryView struct {
	// ID
	ID *int
	// UsersId
	UsersID *int
	// Title
	Title *string
	// Date
	Date *string
	// Location
	Location *string
	// Detail
	Detail *string
}

var (
	// UserMap is a map indexing the attribute names of User by view name.
	UserMap = map[string][]string{
		"default": {
			"id",
			"name",
			"email",
		},
	}
	// MemoryMap is a map indexing the attribute names of Memory by view name.
	MemoryMap = map[string][]string{
		"default": {
			"id",
			"users_id",
			"title",
			"date",
			"location",
			"detail",
		},
	}
)

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMemory runs the validations defined on the viewed result type Memory.
func ValidateMemory(result *Memory) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMemoryView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {

	return
}

// ValidateMemoryView runs the validations defined on MemoryView using the
// "default" view.
func ValidateMemoryView(result *MemoryView) (err error) {
	if result.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.date", *result.Date, goa.FormatDate))
	}
	return
}
