// Code generated by goa v3.14.6, DO NOT EDIT.
//
// server service
//
// Command:
// $ goa gen github.com/4x2Hach1/learning/next-go/api/design

package server

import (
	"context"

	serverviews "github.com/4x2Hach1/learning/next-go/api/gen/server/views"
	"goa.design/goa/v3/security"
)

// Server Service for front.
type Service interface {
	// Hello implements hello.
	Hello(context.Context, *HelloPayload) (res string, err error)
	// Login implements login.
	Login(context.Context, *LoginPayload) (res string, err error)
	// AuthUser implements authUser.
	AuthUser(context.Context, *AuthUserPayload) (res *User, err error)
	// Users implements users.
	Users(context.Context, *UsersPayload) (res []*User, err error)
	// UserByID implements userById.
	UserByID(context.Context, *UserByIDPayload) (res *User, err error)
	// NewUser implements newUser.
	NewUser(context.Context, *NewUserPayload) (res bool, err error)
	// UpdateUser implements updateUser.
	UpdateUser(context.Context, *UpdateUserPayload) (res bool, err error)
	// Memories implements memories.
	Memories(context.Context, *MemoriesPayload) (res []*Memory, err error)
	// MemoryByID implements memoryById.
	MemoryByID(context.Context, *MemoryByIDPayload) (res *Memory, err error)
	// NewMemory implements newMemory.
	NewMemory(context.Context, *NewMemoryPayload) (res bool, err error)
	// DeleteMemory implements deleteMemory.
	DeleteMemory(context.Context, *DeleteMemoryPayload) (res bool, err error)
	// UpdateMemory implements updateMemory.
	UpdateMemory(context.Context, *UpdateMemoryPayload) (res bool, err error)
	// NewHeavy implements newHeavy.
	NewHeavy(context.Context, *NewHeavyPayload) (res string, err error)
	// CheckHeavy implements checkHeavy.
	CheckHeavy(context.Context, *CheckHeavyPayload) (res int, err error)
	// DeleteHeavy implements deleteHeavy.
	DeleteHeavy(context.Context, *DeleteHeavyPayload) (res bool, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "api"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "server"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [15]string{"hello", "login", "authUser", "users", "userById", "newUser", "updateUser", "memories", "memoryById", "newMemory", "deleteMemory", "updateMemory", "newHeavy", "checkHeavy", "deleteHeavy"}

// AuthUserPayload is the payload type of the server service authUser method.
type AuthUserPayload struct {
	// JWT token auth
	Token string
}

// CheckHeavyPayload is the payload type of the server service checkHeavy
// method.
type CheckHeavyPayload struct {
	// JWT token auth
	Token string
	// Key
	Key string
}

// DeleteHeavyPayload is the payload type of the server service deleteHeavy
// method.
type DeleteHeavyPayload struct {
	// JWT token auth
	Token string
	// Key
	Key string
}

// DeleteMemoryPayload is the payload type of the server service deleteMemory
// method.
type DeleteMemoryPayload struct {
	// JWT token auth
	Token string
	// ID
	ID int
}

// HelloPayload is the payload type of the server service hello method.
type HelloPayload struct {
	// Name
	Name string
}

// LoginPayload is the payload type of the server service login method.
type LoginPayload struct {
	// Email
	Email string
	// Password
	Password string
}

// MemoriesPayload is the payload type of the server service memories method.
type MemoriesPayload struct {
	// JWT token auth
	Token string
}

// Memory is the result type of the server service memoryById method.
type Memory struct {
	// ID
	ID *int
	// UsersId
	UsersID *int
	// Title
	Title *string
	// Date
	Date *string
	// Location
	Location *string
	// Detail
	Detail *string
}

// MemoryByIDPayload is the payload type of the server service memoryById
// method.
type MemoryByIDPayload struct {
	// JWT token auth
	Token string
	// ID
	ID int
}

// NewHeavyPayload is the payload type of the server service newHeavy method.
type NewHeavyPayload struct {
	// JWT token auth
	Token string
}

// NewMemoryPayload is the payload type of the server service newMemory method.
type NewMemoryPayload struct {
	// JWT token auth
	Token string
	// Title
	Title string
	// Date
	Date string
	// Location
	Location string
	// Detail
	Detail string
}

// NewUserPayload is the payload type of the server service newUser method.
type NewUserPayload struct {
	// Name
	Name string
	// Email
	Email string
	// Password
	Password string
}

// UpdateMemoryPayload is the payload type of the server service updateMemory
// method.
type UpdateMemoryPayload struct {
	// JWT token auth
	Token string
	// ID
	ID int
	// Title
	Title string
	// Date
	Date string
	// Location
	Location string
	// Detail
	Detail string
}

// UpdateUserPayload is the payload type of the server service updateUser
// method.
type UpdateUserPayload struct {
	// JWT token auth
	Token string
	// Name
	Name string
	// Email
	Email string
}

// User is the result type of the server service authUser method.
type User struct {
	// ID
	ID *int
	// Name
	Name *string
	// Email
	Email *string
}

// UserByIDPayload is the payload type of the server service userById method.
type UserByIDPayload struct {
	// JWT token auth
	Token string
	// ID
	ID int
}

// UsersPayload is the payload type of the server service users method.
type UsersPayload struct {
	// JWT token auth
	Token string
}

// NewUser initializes result type User from viewed result type User.
func NewUser(vres *serverviews.User) *User {
	return newUser(vres.Projected)
}

// NewViewedUser initializes viewed result type User from result type User
// using the given view.
func NewViewedUser(res *User, view string) *serverviews.User {
	p := newUserView(res)
	return &serverviews.User{Projected: p, View: "default"}
}

// NewMemory initializes result type Memory from viewed result type Memory.
func NewMemory(vres *serverviews.Memory) *Memory {
	return newMemory(vres.Projected)
}

// NewViewedMemory initializes viewed result type Memory from result type
// Memory using the given view.
func NewViewedMemory(res *Memory, view string) *serverviews.Memory {
	p := newMemoryView(res)
	return &serverviews.Memory{Projected: p, View: "default"}
}

// newUser converts projected type User to service type User.
func newUser(vres *serverviews.UserView) *User {
	res := &User{
		ID:    vres.ID,
		Name:  vres.Name,
		Email: vres.Email,
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *serverviews.UserView {
	vres := &serverviews.UserView{
		ID:    res.ID,
		Name:  res.Name,
		Email: res.Email,
	}
	return vres
}

// newMemory converts projected type Memory to service type Memory.
func newMemory(vres *serverviews.MemoryView) *Memory {
	res := &Memory{
		ID:       vres.ID,
		UsersID:  vres.UsersID,
		Title:    vres.Title,
		Date:     vres.Date,
		Location: vres.Location,
		Detail:   vres.Detail,
	}
	return res
}

// newMemoryView projects result type Memory to projected type MemoryView using
// the "default" view.
func newMemoryView(res *Memory) *serverviews.MemoryView {
	vres := &serverviews.MemoryView{
		ID:       res.ID,
		UsersID:  res.UsersID,
		Title:    res.Title,
		Date:     res.Date,
		Location: res.Location,
		Detail:   res.Detail,
	}
	return vres
}
