// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package execs

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/4x2Hach1/learning/gql-go/api/models"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	IsUserAuth func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	Validation func(ctx context.Context, obj interface{}, next graphql.Resolver, format *string) (res interface{}, err error)
}

type ComplexityRoot struct {
	Memory struct {
		Date     func(childComplexity int) int
		Detail   func(childComplexity int) int
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
		Title    func(childComplexity int) int
		UserID   func(childComplexity int) int
	}

	Mutation struct {
		DeleteMemory func(childComplexity int, input models.DeleteMemory) int
		NewMemory    func(childComplexity int, input models.NewMemory) int
		NewUser      func(childComplexity int, input models.NewUser) int
		UpdateMemory func(childComplexity int, input models.UpdateMemory) int
		UpdateUser   func(childComplexity int, input models.UpdateUser) int
	}

	Query struct {
		Memories func(childComplexity int) int
		Memory   func(childComplexity int, id int) int
		User     func(childComplexity int, id int) int
	}

	User struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Memory.date":
		if e.complexity.Memory.Date == nil {
			break
		}

		return e.complexity.Memory.Date(childComplexity), true

	case "Memory.detail":
		if e.complexity.Memory.Detail == nil {
			break
		}

		return e.complexity.Memory.Detail(childComplexity), true

	case "Memory.id":
		if e.complexity.Memory.ID == nil {
			break
		}

		return e.complexity.Memory.ID(childComplexity), true

	case "Memory.location":
		if e.complexity.Memory.Location == nil {
			break
		}

		return e.complexity.Memory.Location(childComplexity), true

	case "Memory.title":
		if e.complexity.Memory.Title == nil {
			break
		}

		return e.complexity.Memory.Title(childComplexity), true

	case "Memory.userId":
		if e.complexity.Memory.UserID == nil {
			break
		}

		return e.complexity.Memory.UserID(childComplexity), true

	case "Mutation.deleteMemory":
		if e.complexity.Mutation.DeleteMemory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMemory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMemory(childComplexity, args["input"].(models.DeleteMemory)), true

	case "Mutation.newMemory":
		if e.complexity.Mutation.NewMemory == nil {
			break
		}

		args, err := ec.field_Mutation_newMemory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewMemory(childComplexity, args["input"].(models.NewMemory)), true

	case "Mutation.newUser":
		if e.complexity.Mutation.NewUser == nil {
			break
		}

		args, err := ec.field_Mutation_newUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewUser(childComplexity, args["input"].(models.NewUser)), true

	case "Mutation.updateMemory":
		if e.complexity.Mutation.UpdateMemory == nil {
			break
		}

		args, err := ec.field_Mutation_updateMemory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMemory(childComplexity, args["input"].(models.UpdateMemory)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(models.UpdateUser)), true

	case "Query.memories":
		if e.complexity.Query.Memories == nil {
			break
		}

		return e.complexity.Query.Memories(childComplexity), true

	case "Query.memory":
		if e.complexity.Query.Memory == nil {
			break
		}

		args, err := ec.field_Query_memory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Memory(childComplexity, args["id"].(int)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(int)), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDeleteMemory,
		ec.unmarshalInputNewMemory,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputUpdateMemory,
		ec.unmarshalInputUpdateUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schemas/memories.graphql", Input: `extend type Query {
  memory(id: Int!): Memory @isUserAuth
  memories: [Memory!]! @isUserAuth
}

extend type Mutation {
  newMemory(input: NewMemory!): Boolean! @isUserAuth
  updateMemory(input: UpdateMemory!): Boolean! @isUserAuth
  deleteMemory(input: DeleteMemory!): Boolean! @isUserAuth
}

type Memory {
  id: Int!
  userId: Int!
  title: String!
  date: DateTime!
  location: String
  detail: String
}

input NewMemory {
  title: String!
  date: DateTime!
  location: String
  detail: String
}

input UpdateMemory {
  id: Int!
  title: String!
  date: DateTime!
  location: String
  detail: String
}

input DeleteMemory {
  id: Int!
}
`, BuiltIn: false},
	{Name: "../schemas/schema.graphql", Input: `type Query

type Mutation

scalar DateTime
scalar Map

# Format must correspond to A.https://github.com/go-playground/validator
directive @validation(
  format: String
) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

directive @isUserAuth on FIELD_DEFINITION
`, BuiltIn: false},
	{Name: "../schemas/users.graphql", Input: `extend type Query {
  user(id: Int!): User @isUserAuth
}

extend type Mutation {
  newUser(input: NewUser!): Boolean!
  updateUser(input: UpdateUser!): Boolean! @isUserAuth
}

type User {
  id: Int!
  name: String!
  email: String!
}

input NewUser {
  name: String!
  email: String!
  password: String!
}

input UpdateUser {
  id: Int!
  name: String!
  email: String!
  password: String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
